name: release docker images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'unbound version to build and release (e.g., 1.23.1)'
        required: true
        type: string
      tag_as_latest:
        description: 'tag this release as latest'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      
      - name: set up qemu
        uses: docker/setup-qemu-action@v3
      
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: log in to github container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # extract version from tag (remove 'v' prefix if present)
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}
          else
            echo "❌ unsupported trigger for release workflow" >&2
            exit 1
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 building version: ${VERSION}" >&2
      
      - name: extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' || inputs.tag_as_latest == true }}
          labels: |
            org.opencontainers.image.title=docker-unbound
            org.opencontainers.image.description=unbound dns resolver container
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
      
      - name: build and push docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            UNBOUND_VERSION=${{ steps.version.outputs.version }}
  
  verify:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
      - name: set up qemu
        uses: docker/setup-qemu-action@v3
      
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: log in to github container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: verify image exists for platform
        run: |
          PLATFORM="${{ matrix.platform }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}"
          
          echo "🔍 verifying image exists for platform: ${PLATFORM}"
          docker buildx imagetools inspect "${IMAGE}" --format "{{ range .Manifest.Manifests }}{{ if eq .Platform.Architecture \"$(echo ${PLATFORM} | cut -d'/' -f2)\" }}{{ if eq .Platform.OS \"$(echo ${PLATFORM} | cut -d'/' -f1)\" }}✅ found {{ .Platform.OS }}/{{ .Platform.Architecture }}{{ if .Platform.Variant }}/{{ .Platform.Variant }}{{ end }}{{ end }}{{ end }}{{ end }}"
  
  summary:
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: always()
    permissions:
      contents: read
    
    steps:
      - name: release summary
        run: |
          echo "## 🚀 docker release summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.verify.result }}" == "success" ]]; then
            echo "✅ successfully released docker images for version **${{ needs.build.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **platforms**: linux/amd64, linux/arm64, linux/arm/v7" >> $GITHUB_STEP_SUMMARY
            echo "- **registry**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **image digest**: \`${{ needs.build.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🏷️ **published tags**:" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref_type }}" == "tag" || "${{ inputs.tag_as_latest }}" == "true" ]]; then
              echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ release failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **build status**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **verification status**: ${{ needs.verify.result }}" >> $GITHUB_STEP_SUMMARY
          fi
