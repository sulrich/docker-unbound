name: release docker images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'unbound version to build and release (e.g., 1.23.1)'
        required: true
        type: string
      tag_as_latest:
        description: 'tag this release as latest'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Multi-Arch Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.image_tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
          else
            GIT_TAG="${{ github.ref_name }}"
            VERSION="${GIT_TAG#v}"
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
      
      - name: Generate unique image tag
        id: image_tag
        run: echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Build and push image with temporary tag
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.image_tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            UNBOUND_VERSION=${{ steps.version.outputs.version }}

  test:
    name: Test Built Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run tests on the built image
        run: |
          docker run --rm ${{ needs.build.outputs.image_tag }} /test.sh

  release:
    name: Tag and Release Image
    runs-on: ubuntu-latest
    needs: [build, test]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for final tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.build.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' || inputs.tag_as_latest == true }}

      # note: since i'm pushing a multi-arch image, i need to use the buildx commands
      - name: Retag multi-arch image for release
        run: |
          TAG_OPTIONS=$(echo "${{ steps.meta.outputs.tags }}" | sed 's/^/--tag /' | tr '\n' ' ')
          docker buildx imagetools create ${{ needs.build.outputs.image_tag }} $TAG_OPTIONS

      - name: Release summary
        run: |
          echo "## ðŸš€ docker release summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… successfully released docker images for version **${{ needs.build.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Published tags:" >> $GITHUB_STEP_SUMMARY
          for tag in ${{ steps.meta.outputs.tags }}; do
            echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
          done
