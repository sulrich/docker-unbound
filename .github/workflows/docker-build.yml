name: build docker images

on:
  pull_request:
    branches:
      - '*'
  workflow_call:
    inputs:
      version:
        description: 'unbound version to build (e.g., 1.23.1)'
        required: true
        type: string
      push_temp:
        description: 'push to temporary registry location'
        required: false
        type: boolean
        default: false
    outputs:
      version:
        description: 'version that was built'
        value: ${{ jobs.build.outputs.version }}
      temp_tag:
        description: 'temporary tag used for build artifacts'
        value: ${{ jobs.build.outputs.temp_tag }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      temp_tag: ${{ steps.temp-tag.outputs.temp_tag }}
    
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      
      - name: set up qemu
        uses: docker/setup-qemu-action@v3
      
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: log in to github container registry
        if: github.event_name == 'pull_request' || inputs.push_temp
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            VERSION="${{ inputs.version }}"
          else
            # extract version from root dockerfile
            VERSION=$(grep "ENV UNBOUND_VERSION=" "Dockerfile" | cut -d'=' -f2 | tr -d '"' | tr -d "'")
            if [[ -z "$VERSION" ]]; then
              VERSION="1.23.1"  # fallback
            fi
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 building version: ${VERSION}"
      
      - name: determine build context
        id: context
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if [ -f "./Dockerfile" ]; then
            BUILD_CONTEXT="."
            DOCKERFILE_PATH="./Dockerfile"
            echo "📁 using root directory: ${BUILD_CONTEXT}"
          else
            echo "❌ ERROR: no Dockerfile found" >&2
            exit 1
          fi
          
          echo "build_context=${BUILD_CONTEXT}" >> $GITHUB_OUTPUT
          echo "dockerfile_path=${DOCKERFILE_PATH}" >> $GITHUB_OUTPUT
        id: temp-tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TEMP_TAG="pr-${{ github.event.number }}-${{ github.sha }}"
          elif [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            TEMP_TAG="temp-${{ github.run_id }}-${{ github.sha }}"
          else
            TEMP_TAG="build-${{ github.run_id }}-${{ github.sha }}"
          fi
          echo "temp_tag=${TEMP_TAG}" >> $GITHUB_OUTPUT
          echo "🏷️ using temporary tag: ${TEMP_TAG}"
      
      - name: determine temporary tag
        id: temp-tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.temp-tag.outputs.temp_tag }}
            type=raw,value=${{ steps.version.outputs.version }}-${{ steps.temp-tag.outputs.temp_tag }}
          labels: |
            org.opencontainers.image.title=unbound
            org.opencontainers.image.description=unbound dns resolver for raspberry pi
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
      
      - name: build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v7,linux/arm64,linux/amd64
          push: ${{ github.event_name == 'pull_request' || inputs.push_temp }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            UNBOUND_VERSION=${{ steps.version.outputs.version }}
      
      - name: update pr status - success
        if: github.event_name == 'pull_request' && success()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `built and pushed to ghcr.io with tag: ${{ steps.temp-tag.outputs.temp_tag }}`,
              context: 'docker/build'
            });
      
      - name: update pr status - failure
        if: github.event_name == 'pull_request' && failure()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'docker build failed',
              context: 'docker/build'
            });
      
      - name: build summary
        run: |
          echo "## 🐳 docker build summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ successfully built multi-arch images for version **${{ steps.version.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **platforms**: linux/arm/v7, linux/arm64, linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- **context**: \`.\`" >> $GITHUB_STEP_SUMMARY
          echo "- **temporary tag**: \`${{ steps.temp-tag.outputs.temp_tag }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ inputs.push_temp }}" == "true" ]]; then
            echo "- **registry**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🏷️ **image tags pushed**:" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.temp-tag.outputs.temp_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ steps.temp-tag.outputs.temp_tag }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📝 **note**: images built for validation only (not pushed)" >> $GITHUB_STEP_SUMMARY
          fi
